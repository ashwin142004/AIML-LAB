Searching Problems 
Thre main components 
    A State Space. Set of all possible states where you can be.
    A Start State. The state from where the search begins.
    A Goal State. A function that looks at the current state returns whether or not it is the goal state.
    
    There are 3 types of goal state
        Single goal state
        Set of goal states 
        property goal state(Goal property)

Two types of searching 
    Informed search - Here, the algorithms have information on the goal state, which helps in more efficient searching. This information is obtained by something called a heuristic. 
        - Best first Search 
        - A* Search
        - Greedy Search

    Uniniformed search - The search algorithms in this section have no additional information on the goal node other than the one provided in the problem definition. 
                        Also called Blind Search
        - DFS 
        - BFS 
        - Uniform Cost Search




Best First Search 


ways to deal with redundancy in search Problems
- Tracking already visited nodes
- Ignoring past states
- Detecting only cycles


Measure Performance of algorithms
1. Completeness
2. cost optimality 
3. Time complexity
4. Space complexity



Informed Search 
 - Greedy Best first search 
    f(n) = h(n)
    straight line distance
    - fast but suboptimal
    - complete finite space
    - compexity 
        Time : O(V)
        Space : O(V)
    

    S(7) - A(6) - B(4) - C(3)
            |       |
    D(6) - e(5) - F(2) - G(0) 

Soln:
    S -> A -> B -> F -> G

 - A* Search
    f(n) = g(n) + h(n)
    -g(n) => actual cost
    -h(n) => heuristic

    Features
     - Admissibility
     - Consistency
     - optimality
     - Efficiencly
     

Uniniformed Search
-DFS
DFS(problem) returns a solution node or failure  
    node <- Node(problem.Initial)  
    if problem.is_goal(node.State) then return node  
    frontier <- a stack (LIFO), with node as an element  
    reached <- {problem.Initial}  
    while not is_empty(frontier) do  
        node <- frontier.pop()  
        if problem.is_goal(node.State) then return node  
        for child in Expand(node) do  
            s <- child.State  
            if s is not in reached then  
                add s to reached  
                add child to frontier  
    return failure  


-BFS
BFS(problem) returns a solution node or failure
    node <- Node(problem.Initial)
    if problem.is_goal(node.State) then return node
    frontier <- a fifo queue, with node as an element
    reached <- {problem.Initial}
    while not is_empty(frontier) do
        node <- child.State
        if problem.is_goal(s) then return child
        if s is not in reached then
            add s to reached
            add child to frontier
    return failure